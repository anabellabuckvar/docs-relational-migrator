.. _rm-app-analysis-risk-reference:

========================
Migration Risk Reference
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Pre-Migration Analysis generates a report that lists migration risks in your
source database. This reference page lists all of the migration risks
Relational Migrator may detect on supported databases.

Risk Categories
---------------

Migration risks are categorized as one of:

- ``DATA_TYPE``: Data types that can result in lost precision or lost data when
  migrating to MongoDB.
- ``SCHEMA``: Database or table configuration that causes difficulties when 
  mapping source database schema to MongoDB.
- ``UNSUPPORTED_FEATURE``: Features of other databases that aren't supported 
  in MongoDB.
- ``PERFORMANCE``: Database or table configuration that may cause performance
  issues when migrating data into MongoDB.

Risk Reference
--------------

.. tabs::

   .. tab:: MySQL
      :tabid: db-mysql

      .. list-table::
         :header-rows: 1

         * - Name
           - Type
           - Category
           - Difficulty
           - Data Types
           - Report Message
           - Mitigation

         * - Auto-Incrementing Columns
           - Table
           - ``SCHEMA``
           - High
           - 
           - Table <name> has an auto incrementing column.
           - MongoDB encourages the use of ObjectID for ID fields because 
             incrementing IDs have difficulty sharding. MongoDB Relational
             Migrator can migrate your keys as-is, but you will need to write
             code to maintain this behavior. If you're using MongoDB Atlas, you
             can use Atlas Triggers to auto-increment your IDs.
         
         * - Blob Types
           - Table
           - ``DATA_TYPE``
           - Medium
           - ``MYSQL_MEDIUMBLOB``, ``MYSQL_LONGBLOB``, ``MYSQL_MEDIUMTEXT``, 
             ``MYSQL_LONGTEXT``
           - The table contains columns which could exceed the 16MB limit.
           - If you are storing >16MB in the record, the migration will fail as
             MongoDB documents cannot exceed 16MB. We strongly advise against
             storing large blobs in MongoDB, but if multi-document transactions
             aren't required you can use GridFS.

         * - Geospatial Data
           - Table
           - ``DATA_TYPE``
           - High
           - ``MYSQL_GEOMETRY``, ``MYSQL_POINT``, ``MYSQL_LINESTRING``, 
             ``MYSQL_POLYGON``, ``MYSQL_MULTIPOINT``, ``MYSQL_MULTILINESTRING``, ``MYSQL_MULTIPOLYGON``, ``MYSQL_GEOMETRYCOLLECTION``
           - The table contains columns which require special handling: 
             <columns>
           - You are storing geospatial data in your database. These will be
             converted to objects with: - srid (int) coordinate reference - wkb
             (binary) in WKB (well-known-binary) format

         * - Triggers
           - Database
           - ``UNSUPPORTED_FEATURE``
           - High
           - 
           - The database has triggers.
           - MongoDB has no native way to implement triggers. If you're using
             Atlas, consider using Query Converter to convert your existing
             triggers to Atlas Triggers to replicate the existing behavior.

         * - Numeric precision (specified)
           - Table
           - ``DATA_TYPE``
           - Medium
           - 
           - The following columns are at risk of data loss due to decimal 
             precision: <columns>
           - The specified columns have been configured to support more decimal
             precision than is supported in a Decimal128 field. During
             migration, these values will be rounded to 34 significant figures.

         * - No foreign keys found
           - Database
           - ``SCHEMA``
           - Medium
           - 
           - The database has no foreign keys.
           - This will make the schema mapping more complicated as we cannot
             infer the relationship between your tables without them. You can
             use the synthetic foreign keys feature of Migrator to define
             logical relationships between your tables.

         * - Routines
           - Database
           - ``UNSUPPORTED_FEATURE``
           - Medium
           - 
           - There were routines detected in <database>.
           - MongoDB has no native way to represent routines. Consider using 
             Query Converter to migrate your routines to application code.

         * - Views
           - Database
           - ``SCHEMA``
           - Medium
           - 
           - There were views detected in <database>.
           - Views are supported in MongoDB but they must be converted into 
             MQL. Consider using Query Converter to migrate your views.

         * - Large single table
           - Database
           - ``PERFORMANCE``
           - Medium
           - 
           - The total data size of the selected tables is greater than 
             <limit> GB, at 100 GB.
           - Larger data migration jobs can require careful planning to 
             maximize performance and reliability. The deployment 
             considerations topic in the documentation provides advice which 
             can help. For jobs that may run over multiple days, consider 
             using the Kafka deployment model.

   .. tab:: Oracle
      :tabid: db-oracle

      .. list-table::
         :header-rows: 1

         * - Name
           - Type
           - Category
           - Difficulty
           - Data Types
           - Report Message
           - Mitigation

         * - Geospatial Data
           - Table
           - ``DATA_TYPE``
           - High
           - ``ORACLE_SDO_GEOMETRY``, ``ORACLE_SDO_GTYPE``,
             ``ORACLE_SDO_SRID``, ``ORACLE_SDO_POINT``,
             ``ORACLE_SDO_ELEM_INFO``, ``ORACLE_SDO_ORDINATES``
           - The table contains columns which require special handling: 
             <columns>
           - You are storing geospatial data in your database. These will be
             converted to objects with: - srid (int) coordinate reference - wkb
             (binary) in WKB (well-known-binary) format

         * - Blob Types
           - Table
           - ``DATA_TYPE``
           - Medium
           - ``ORACLE_BLOB``, ``ORACLE_CLOB``, ``ORACLE_NCLOB``
           - The table contains columns which could exceed the 16MB limit.
           - If you are storing >16MB in the record, the migration will fail as
             MongoDB documents cannot exceed 16MB. We strongly advise against
             storing large blobs in MongoDB, but if multi-document transactions
             aren't required you can use GridFS.

         * - Numeric precision (specified)
           - Table
           - ``DATA_TYPE``
           - Medium
           - 
           - The following columns are at risk of data loss due to decimal 
             precision: <columns>
           - The specified columns have been configured to support more decimal
             precision than is supported in a Decimal128 field. During
             migration, these values will be rounded to 34 significant figures.

         * - Numeric precision (unspecified)
           - Table
           - ``DATA_TYPE``
           - Medium
           - 
           - The following columns may be at risk of data loss due to decimal
             precision: <columns>
           - The specified columns are using variable decimal precision and may
             contain values with more decimal precision than is supported in a
             Decimal128 field. During migration, these values will be rounded
             to 34 significant figures.

         * - Timezones on dates
           - Table
           - ``DATA_TYPE``
           - Medium
           - ``ORACLE_TIMESTAMP_WITH_TIME_ZONE``, 
             ``ORACLE_TIMESTAMP_WITH_LOCAL_TIME_ZONE``
           - Detected columns with <type> type. MongoDB stores times in UTC by 
             default, and Relational Migrator may convert any local time representations into this form or to a direct string. Affected columns: <columns>
           - MongoDB does not support storing timezones with time data. 
             Consider converting to a desired timezone in your application or storing it as a string   

         * - File on-disk
           - Table
           - ``DATA_TYPE``
           - Medium
           - ``ORACLE_BFILE``
           - Detected columns with type <type>. Migration to MongoDB is not 
             currently supported for this type. Affected columns: <columns>.
           - ``ORACLE_BFILE`` is not supported by MongoDB. If the file must be 
             stored in your database and multi-document transactions aren't 
             required, you can use GridFS. Otherwise, we encourage storing 
             your files on cloud storage & recording the URI instead.

         * - Unsupported Oracle Types
           - Table
           - ``DATA_TYPE``
           - Medium
           - ``ORACLE_LONG``, ``ORACLE_LONG_RAW``, ``ORACLE_UROWID``
           - Detected columns with type <type>. Migration to MongoDB is not 
             currently supported for this type. Affected columns: <columns>.
           - - ``ORACLE_LONG`` data type is deprecated by Oracle and 
               equivalent LOB data types are not supported in MongoDB. If the
               file must be stored in your database and multi-document
               transactions aren't required, you can use GridFS. Otherwise, we
               encourage storing your files on cloud storage & recording the
               URI instead.
             - ``ORACLE_UROWID`` data type is essentially a FK to another row, 
               stored as binary. We encourage migrating to using explicit IDs 
               where possible, with FK enforcement, to assist data migration.

         * - Auto-Incrementing Columns
           - Table
           - ``SCHEMA``
           - High
           - 
           - Table <name> has an auto incrementing column.
           - MongoDB encourages the use of ObjectID for ID fields because 
             incrementing IDs have difficulty sharding. MongoDB Relational
             Migrator can migrate your keys as-is, but you will need to write
             code to maintain this behavior. If you're using MongoDB Atlas, you
             can use Atlas Triggers to auto-increment your IDs.
             
         * - No foreign keys found
           - Database
           - ``SCHEMA``
           - Medium
           - 
           - The database has no foreign keys.
           - This will make the schema mapping more complicated as we cannot
             infer the relationship between your tables without them. You can
             use the synthetic foreign keys feature of Migrator to define
             logical relationships between your tables.

         * - Views
           - Database
           - ``SCHEMA``
           - Medium
           - 
           - There were views detected in <database>.
           - Views are supported in MongoDB but they must be converted into 
             MQL. Consider using Query Converter to migrate your views.

         * - Triggers
           - Database
           - ``UNSUPPORTED_FEATURE``
           - High
           - 
           - The database has triggers.
           - MongoDB has no native way to implement triggers. If you're using
             Atlas, consider using Query Converter to convert your existing
             triggers to Atlas Triggers to replicate the existing behavior.

         * - Routines
           - Database
           - ``UNSUPPORTED_FEATURE``
           - Medium
           - 
           - There were routines detected in <database>.
           - MongoDB has no native way to represent routines. Consider using 
             Query Converter to migrate your routines to application code.

         * - Oracle Packages
           - Database
           - ``UNSUPPORTED_FEATURE``
           - Medium
           - 
           - A package is a schema object that groups logically related PL/SQL 
             types, variables, constants, subprograms, cursors, and exceptions.
             A package is compiled and stored in the database, where many 
             applications can share its contents.
           - MongoDB does not have any features that are equivalent to Oracle 
             Packages. You can use the Query Converter feature of Migrator to 
             define logical relationships between your tables.

         * - Large single table
           - Database
           - ``PERFORMANCE``
           - Medium
           - 
           - The total data size of the selected tables is greater than 
             <limit> GB, at 100 GB.
           - Larger data migration jobs can require careful planning to 
             maximize performance and reliability. The deployment 
             considerations topic in the documentation provides advice which 
             can help. For jobs that may run over multiple days, consider 
             using the Kafka deployment model.


   .. tab:: PostgreSQL
      :tabid: db-postgresql


   .. tab:: SQL Server
      :tabid: db-sql
